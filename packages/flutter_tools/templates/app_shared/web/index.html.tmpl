<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="{{description}}">

  <!-- iOS meta tags & icons -->
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="{{projectName}}">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>{{projectName}}</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <!-- This script installs service_worker.js to provide PWA functionality to
       application. For more information, see:
       https://developers.google.com/web/fundamentals/primers/service-workers -->
  <script type="typescript">
    interface IOption {
        timeout: number;
    }

    interface IResponse {
        data: string;
        status: number;
        statusText: string;
        request: XMLHttpRequest;
    }

    interface ICustomResponse {
        response: IResponse;
        cost: number;
    }

    const w: any = window;

    class Axios {
        option: IOption;
        constructor(option: IOption) {
            this.option = option;
        }

        create(option?: IOption) {
            if (option) {
                this.option = option;
            }

            return this;
        }

        get(url: string): Promise<ICustomResponse> {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url);
            xhr.timeout = this.option.timeout;
            xhr.send();
            const startTm = Date.now();
            return new Promise((resolve, reject) => {
                xhr.onreadystatechange = function () {
                    if (!xhr || xhr.readyState !== 4) {
                        return;
                    }
                    if (xhr.status !== 200) {
                        reject(new Error('Network ' + xhr.status));
                    }
                    const response: IResponse = {
                        data: xhr.responseText,
                        status: xhr.status,
                        statusText: xhr.statusText,
                        request: xhr,
                    };
                    const endTm = Date.now();
                    const cost = endTm - startTm;
                    resolve({
                        response,
                        cost,
                    });
                };
                xhr.onerror = function () {
                    reject(new Error('Network Error'));
                };
                xhr.ontimeout = function () {
                    reject(new Error('Network Timeout'));
                };
            });
        }
    }

    const axios = new Axios({ timeout: 30 * 1000 });

    function checkEnv() {
        const hostname = location.hostname;
        if (/(localhost)|(\d+\.){3}(\d+)$/g.test(hostname)) {
            return 'local';
        }
        return 'online';
    }

    function getAssetBaseUrl() {
        return w.assetBase || '' + '/';
    }

    function addMainDartJs() {
        document.addEventListener('DOMContentLoaded', function () {
            // 创建js
            const jsUrl = '/main.dart.js';
            const mainJs = document.createElement('script');
            mainJs.src = jsUrl;
            document.body.appendChild(mainJs);
            document.getElementById('mtflutter-web-page-loading')?.remove();
        });
    }

    function getSplitFiles() {
        const env = checkEnv();
        if (env === 'local') {
            addMainDartJs();
            return;
        }
        const baseUrl = getAssetBaseUrl();
        function getResources(urlArr: string[]) {
            const promiseArr: Promise<any>[] = [];
            urlArr.forEach((url) => {
                promiseArr.push(instanceAxios.get(url));
            });
            const start = Date.now();
            Promise.all(promiseArr).then(
                (resolve) => {
                    errorCnt = 0;
                    const jsArr: string[] = [];
                    resolve.forEach((customResponse: ICustomResponse) => {
                        const { response } = customResponse;
                        jsArr.push(response.data);
                    });
                    const end = Date.now();
                    const script = document.createElement('script');
                    script.textContent = jsArr.join('');
                    document.body.appendChild(script);
                    setTimeout(function () {
                        document.getElementById('mtflutter-web-page-loading')?.remove();
                        // 上报时间
                        report(LogType.success, `${urlArr[0]}~5.js`, `${end - start}`);
                    }, 300);
                },
                () => {
                    errorCnt++;
                    if (errorCnt > 5) {
                        const a = document.createElement('a');
                        a.href = 'javascript:location.reload()';
                        a.style.textAlign = 'center';
                        a.style.margin = '50px auto';
                        a.style.display = 'block';
                        a.style.color = '#f89800';
                        a.innerText = '加载失败，点击重新请求页面';
                        document.body.appendChild(a);
                        document.getElementById('mtflutter-web-page-loading')?.remove();
                        report(LogType.fail, urlArr.join(','), 'errorCnt > 5');
                    } else {
                        getResources(urlArr);
                    }
                },
            );
        }

        const hash = w.hash;
        let errorCnt = 0;
        const instanceAxios = axios.create();

        const urlArr: string[] = [];
        for (let i = 0; i < 6; i++) {
            urlArr.push(`${baseUrl}${hash}/${i}.js`);
        }
        if (hash) {
            getResources(urlArr);
        }
    }
    // 加载分片
    getSplitFiles();
  </script>
  <script>
    var serviceWorkerVersion = null;
    var scriptLoaded = false;
    function loadMainDartJs() {
      if (scriptLoaded) {
        return;
      }
      scriptLoaded = true;
      var scriptTag = document.createElement('script');
      scriptTag.src = 'main.dart.js';
      scriptTag.type = 'application/javascript';
      document.body.append(scriptTag);
    }

    if ('serviceWorker' in navigator) {
      // Service workers are supported. Use them.
      window.addEventListener('load', function () {
        // Wait for registration to finish before dropping the <script> tag.
        // Otherwise, the browser will load the script multiple times,
        // potentially different versions.
        var serviceWorkerUrl = 'flutter_service_worker.js?v=' + serviceWorkerVersion;
        navigator.serviceWorker.register(serviceWorkerUrl)
          .then((reg) => {
            function waitForActivation(serviceWorker) {
              serviceWorker.addEventListener('statechange', () => {
                if (serviceWorker.state == 'activated') {
                  console.log('Installed new service worker.');
                  loadMainDartJs();
                }
              });
            }
            if (!reg.active && (reg.installing || reg.waiting)) {
              // No active web worker and we have installed or are installing
              // one for the first time. Simply wait for it to activate.
              waitForActivation(reg.installing || reg.waiting);
            } else if (!reg.active.scriptURL.endsWith(serviceWorkerVersion)) {
              // When the app updates the serviceWorkerVersion changes, so we
              // need to ask the service worker to update.
              console.log('New service worker available.');
              reg.update();
              waitForActivation(reg.installing);
            } else {
              // Existing service worker is still good.
              console.log('Loading app from service worker.');
              loadMainDartJs();
            }
          });

        // If service worker doesn't succeed in a reasonable amount of time,
        // fallback to plaint <script> tag.
        setTimeout(() => {
          if (!scriptLoaded) {
            console.warn(
              'Failed to load app from service worker. Falling back to plain <script> tag.',
            );
            loadMainDartJs();
          }
        }, 4000);
      });
    } else {
      // Service workers not supported. Just drop the <script> tag.
      loadMainDartJs();
    }
  </script>
</body>
</html>
